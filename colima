#!/usr/bin/env bash

# app details
export NAME=colima
export LIMA_INSTANCE="$NAME"
export VERSION="0.1.9"

# locations
export CONF_DIR="$HOME/.${NAME}"
export LIMA_DIR="$HOME/.lima/$NAME"
export LIMA_HOME_DIR=/home/${USER}.linux # avoid using LIMA_HOME to not override Lima's behaviour.
export LAUNCHD_NAME=com.abiosoft.${NAME}.plist
export LAUNCHD_AGENTS_DIR="$HOME/Library/LaunchAgents"
export LAUNCHD_FILE="$LAUNCHD_AGENTS_DIR/$LAUNCHD_NAME"
export LOG_FILE="$CONF_DIR/out.log"

# configs and flags
export SSH_PORT=41122
export CPU="2"
export MEMORY="4"
export DISK="60"
export CONF_CHANGED=""
export ENABLE_KUBERNETES=""

# init
mkdir -p "$CONF_DIR"
echo >"$LOG_FILE" # reset log file

# make room for m1 macs
export ARCH=amd64
if [ "$(uname -m)" = "arm64" ]; then
    export ARCH=arm64
fi

print_usage() (
    cat <<EOF
usage: $NAME <command>

commands:
  start [--with-kubernetes --cpu 2 --memory 4 --disk 60]
    Start (and/or provision) $NAME VM with docker (and kubernetes
    if --with-kubernetes is passed). 

    --with-kubernetes start (and/or provision) Kubernetes.
      Kubernetes requires at least 2 CPUs and 2.3GiB memory.
    --cpu is number of CPUs. Defaults to 2.
    --memory is memory in GiB. Defaults to 4.
    --disk is disk size in GiB. Defaults to 60.

    For verbose ouput, tail the log file "$LOG_FILE".

  stop
    Stop the $NAME VM.

  delete
    Delete and teardown the $NAME VM and settings.

  ssh [args ...]
    SSH into the $NAME VM.

  status
    Show the status of the $NAME VM.

  version
    Show the version of $NAME.

  -h, --help
    Show this help.

  k, kube, kubernetes <command>
    start
      Start Kubernetes

    stop
      Stop Kubernetes

    dashboard
      Enable the Kubernetes dashboard and print the url.

    reset
      Reset the kubernetes cluster.
EOF
    if [ -z "$1" ]; then exit 0; else exit 1; fi
)

log() (
    echo >&2 "[$NAME]" "$(date +'%H:%M:%S')" "$@"
)

stage() (
    log "$@" ...
)

run() (
    "$@" >>"$LOG_FILE" 2>&1
)

prompt() (
    msg="$*"
    read -r -p "${msg}? [y/N] " yn
    case $yn in
    [Yy]*) exit 0 ;;
    *) exit 1 ;;
    esac
)

config_file() (
    cat >${NAME}.yaml <<EOF
arch: "default"
images:
  - location: "https://cloud-images.ubuntu.com/hirsute/current/hirsute-server-cloudimg-amd64.img"
    arch: "x86_64"
  - location: "https://cloud-images.ubuntu.com/hirsute/current/hirsute-server-cloudimg-arm64.img"
    arch: "aarch64"
cpus: $CPU
memory: "${MEMORY}GiB"
disk: "${DISK}GiB"
mounts:
  - location: "~"
    # CAUTION: writable SHOULD be false for the home directory.
    # Setting writable to true is possible, but untested and dangerous.
    writable: false
  - location: "/tmp/$NAME"
    writable: true
ssh:
  localPort: $SSH_PORT
  loadDotSSHPubKeys: false
containerd:
  system: false
  user: false
firmware:
  legacyBIOS: false
EOF
)

assert_vm_running() (
    run lima uname || (log $NAME VM is not running. Run \'$NAME start\' to start $NAME && exit 1)
)

launchd_file() (
    FILE="$LAUNCHD_FILE"
    [ -f "$FILE" ] && exit 0

    # ensure the agent directory exists
    mkdir -p "$LAUNCHD_AGENTS_DIR"

    cat >"$FILE" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
    <dict>
        <key>Label</key>
        <string>com.abiosoft.${NAME}</string>
        <key>Program</key>
        <string>$CONF_DIR/socket.sh</string>
        <key>RunAtLoad</key>
        <true/>
        <key>KeepAlive</key>
        <true/>
        <key>ThrottleInterval</key>
        <integer>5</integer>
    </dict>
</plist>
EOF
)

socket_file() (
    FILE="$CONF_DIR"/socket.sh
    if [ -f "$FILE" ]; then exit 0; fi

    cat >"$FILE" <<EOF
#!/usr/bin/env bash
rm -rf "$CONF_DIR/docker.sock"
ssh -p $SSH_PORT \
    -i ~/.lima/_config/user \
    -o IdentitiesOnly=yes \
    -F /dev/null \
    -o NoHostAuthenticationForLocalhost=yes \
    -L "$CONF_DIR/docker.sock":/var/run/docker.sock \
    -N "127.0.0.1"
EOF
    chmod +x "$FILE"
)

check_deps() (
    run command -v lima || (log lima not found. Run 'brew install lima' to install. && exit 1)
    run command -v docker || (log docker not found. Run 'brew install docker' to install. && exit 1)
)

check_deps_k8s() (
    run command -v kubectl || (log kubectl not found. Run 'brew install kubectl' to install. && exit 1)
)

kube() (
    run lima minikube "$@"
)

status() (
    set -eu

    ERROR=""
    health() {
        if "$@"; then
            echo success
        else
            echo error
            ERROR="1"
        fi
        echo
    }
    # check vm
    run lima uname || (echo $NAME VM is not running. && exit 1)

    # check docker in VM
    echo docker is installed VM?
    health run lima command -v docker

    echo docker is running in VM?
    health run lima service docker status

    # check docker on host
    echo docker is installed on Host?
    health run command -v docker

    echo docker client on host can access the VM server?
    health run docker version

    # check kubernetes in VM
    echo kubernetes is installed in VM?
    health run lima command -v minikube

    echo kubernetes is running in VM?
    health kube status

    echo kubernetes client on host can access the VM?
    health run kubectl cluster-info

    if [ -n "$ERROR" ]; then
        echo "some checks failed :("
        exit 1
    else
        echo "everything looks good :)"
    fi
)

start_docker() (
    run lima sudo service docker start
    run launchctl load "$LAUNCHD_FILE"
)

stop_docker() (
    if run lima service docker status; then
        run lima sudo service docker stop
    fi
    run launchctl unload "$LAUNCHD_FILE"
)

provision_docker() (
    # check docker socket
    if [ "$(readlink /var/run/docker.sock)" != "$CONF_DIR/docker.sock" ]; then
        stage sudo password may be required to set up docker socket
        sudo rm -rf /var/run/docker.sock
        sudo ln -s "$CONF_DIR/docker.sock" /var/run/docker.sock
        log docker socket setup successful
    fi

    # check docker installation
    if ! run lima command -v docker; then
        stage provisioning docker in VM
        run lima sudo apt -y install docker.io

        # enable buildkit by default.
        # eventually, there should be an easy way to configure Docker.
        # users may want to set other configs like registries e.t.c.
        run lima sudo mkdir -p /etc/docker
        run lima sudo sh -c "echo '{\"features\":{\"buildkit\":true}}' > /etc/docker/daemon.json"
    fi

    # verify and fix user docker permission
    if ! run lima sh -c "getent group docker | grep \"\b${USER}\b\""; then
        run lima sudo usermod -aG docker "$USER"
        # reset vm for user docker group to reflect
        stage restarting VM to complete docker setup
        run limactl stop $NAME
        sleep 2
        run limactl start $NAME
        log VM restarted
    fi

    # launchd for docker socket
    socket_file
    launchd_file

    # start
    stage starting docker
    start_docker
    log docker startup successful
)

teardown_docker() (
    # remove socket service
    if [ -f "$LAUNCHD_FILE" ]; then
        run launchctl unload "$LAUNCHD_FILE"
    fi
)

provision_kubeconfig() (
    # ignore if previously provisioned
    if [ -f "$HOME/.kube/.${NAME}" ]; then exit 0; fi

    # ascertain deps for kubernetes
    check_deps_k8s

    # kube config
    HOST_KUBE_DIR="$HOME/.kube"
    LIMA_KUBE_DIR="$LIMA_HOME_DIR/.kube"
    mkdir -p "$HOST_KUBE_DIR"

    # flatten in lima for portability
    lima sh -c "minikube kubectl -- config view --flatten > \"$LIMA_KUBE_DIR/flat-config\""

    # replace unreachable ip with localhost
    lima sed -i 's/192.168.5.15:8443/127.0.0.1:8443/' "$LIMA_KUBE_DIR/flat-config"
    # rename to $NAME
    lima sed -i "s/minikube/$NAME/g" "$LIMA_KUBE_DIR/flat-config"
    # reverse unintended rename
    lima sed -i "s/${NAME}.sigs.k8s.io/minikube.sigs.k8s.io/g" "$LIMA_KUBE_DIR/flat-config"

    # copy to host
    run limactl cp $NAME:"$LIMA_KUBE_DIR/flat-config" "$HOST_KUBE_DIR/flat-config"

    # flatten/merge on host
    KUBECONFIG="${HOST_KUBE_DIR}/config:${HOST_KUBE_DIR}/flat-config" kubectl config view --raw >"$HOST_KUBE_DIR/lima-config"

    # backup previous config
    [ -f "$HOST_KUBE_DIR/config" ] && cp "$HOST_KUBE_DIR/config" "$HOST_KUBE_DIR"/config-"$(date +%s)".bak

    # set combined config as new config
    cp "$HOST_KUBE_DIR/lima-config" "$HOST_KUBE_DIR/config"

    # set the new context
    kubectl config use-context $NAME

    # provision flag to indicate provision has been done
    touch "$HOST_KUBE_DIR/.${NAME}"

    # clean up dirt
    rm "$HOST_KUBE_DIR/lima-config"
    rm "$HOST_KUBE_DIR/flat-config"
)

teardown_kubeconfig() (
    # reset provision flag
    rm -rf "$HOME/.kube/.${NAME}"
    # unset kube config
    run kubectl config unset users.${NAME}
    run kubectl config unset contexts.${NAME}
    run kubectl config unset clusters.${NAME}
)

start_minikube() (
    if ! run kube status; then
        kube start --driver=none
    fi
    provision_kubeconfig
)

stop_minikube() (
    kube status || exit 0
    kube stop
)

provision_minikube() (
    FIRST_RUN=""
    if ! run lima command -v minikube; then
        # deps
        stage installing kubernetes dependencies in VM
        run lima sudo apt -y install conntrack socat

        # minikube
        stage downloading minikube
        run lima curl -L -o /tmp/minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-${ARCH}
        run lima sudo install /tmp/minikube /usr/local/bin/minikube

        FIRST_RUN="1"
    fi

    # start k8s
    # first start takes time, it's better to inform the user
    stage starting kubernetes
    if [ -n "$FIRST_RUN" ]; then
        log "NOTE: this is the first startup of kubernetes, it will take a while"
        log "      but no worries, subsequent startups only take some seconds"
    fi
    start_minikube
)

teardown_minikube() (
    if run lima command -v minikube; then
        stage deleting kubernetes cluster
        kube delete
    fi

    teardown_kubeconfig
)

provision_vm() (
    stage provisioning docker
    provision_docker
    if [ -n "$ENABLE_KUBERNETES" ]; then
        stage provisioning kubernetes
        provision_minikube
    fi
)

stop_vm() (
    set -eu
    assert_vm_running

    stage stopping docker
    stop_docker

    stage stopping VM
    run limactl stop $NAME

    log "done"
)

teardown_vm() (
    set -eu
    prompt Are you sure you want to delete the VM and all settings

    stage deleting docker and kubernetes configs
    teardown_minikube
    teardown_docker

    # stop and delete vm
    stage deleting $NAME VM
    if run lima uname; then
        stop_vm
    fi
    run limactl delete $NAME

    stage deleting other configs
    # delete leftover config
    rm -rf "$CONF_DIR"

    log "done"
)

start_vm_args() {
    CURRENT_FLAG=""
    assert_number() (
        re='^[0-9]+([.][0-9]+)?$'
        if ! [[ $1 =~ $re ]]; then
            log "$1" is not a number at "'$CURRENT_FLAG $1'"
            exit 1
        fi
    )
    # parse args
    while true; do
        CURRENT_FLAG="$1"
        case "$1" in
        --with-kubernetes)
            shift
            ENABLE_KUBERNETES="1"
            ;;
        --cpu)
            shift
            assert_number "$1" || exit 1
            CPU="$1"
            CONF_CHANGED="1"
            shift
            ;;
        --memory)
            shift
            assert_number "$1" || exit 1
            MEMORY="$1"
            CONF_CHANGED="1"
            shift
            ;;
        --disk)
            shift
            assert_number "$1" || exit 1
            DISK="$1"
            CONF_CHANGED="1"
            shift
            ;;
        *)
            break
            ;;
        esac
    done

}

start_vm() (
    start_vm_args "$@" || exit 1

    set -eu
    check_deps

    if [ -d "$LIMA_DIR" ]; then
        if run lima uname; then
            log VM is already running, config flags will be ignored "(if specified)".
        else
            if [ -n "$CONF_CHANGED" ]; then
                stage config changed, updating VM config
                config_file
                cp ${NAME}.yaml "$LIMA_DIR/lima.yaml"
                rm ${NAME}.yaml
            fi
            stage starting VM
            run limactl start $NAME
        fi
    else
        stage creating and starting VM
        config_file
        run limactl start --tty=false ${NAME}.yaml
        rm ${NAME}.yaml
    fi

    stage provisioning VM
    provision_vm

    log "done"
)

lima_ssh() (
    set -eu
    assert_vm_running
    lima "$@"
)

reset_minikube() (
    set -eu
    prompt Are you sure you want to reset the Kubernetes cluster

    assert_vm_running
    kube status || (log kubernetes is not enabled. && exit 1)
    teardown_minikube

    stage starting kubernetes
    start_minikube
)

version() (
    # app version
    echo $NAME v${VERSION}

    # docker version
    if run assert_vm_running; then
        echo
        echo "Docker"
        docker version --format 'Client Version: v{{.Client.Version}}{{printf "\n"}}Server Version: v{{.Server.Version}}'
    fi

    # kubernetes version
    if kube status; then
        echo
        echo "Kubernetes"
        kubectl --context colima version --short
    fi
)

kube_command() (
    k_usage() {
        cat <<EOF
usage: $NAME kubernetes <command>

commands:
  start
    Start Kubernetes

  stop
    Stop Kubernetes

  dashboard
    Enable the Kubernetes dashboard and print the url.

  reset
    Reset the kubernetes cluster.
EOF
        exit 1
    }
    # prevent set -eu from crashing for zero args
    if [ $# -eq 0 ]; then
        k_usage
    fi

    set -eu
    assert_vm_running

    case "$1" in
    start)
        provision_minikube
        log "done"
        ;;
    stop)
        stage stopping kubernetes
        stop_minikube
        log "done"
        ;;
    dashboard)
        kube status || (log kubernetes is not enabled. && exit 1)
        lima minikube dashboard --url 2>/dev/null
        ;;
    reset)
        reset_minikube
        ;;
    -h | --help)
        k_usage
        ;;
    "")
        k_usage
        ;;
    *)
        echo "invalid arg '$1'. view help with '$NAME kubernetes --help'."
        ;;
    esac

)

case "$1" in
start)
    shift
    start_vm "$@"
    ;;
stop)
    stop_vm
    ;;
delete)
    teardown_vm
    ;;
ssh)
    shift
    lima_ssh "$@"
    ;;
status)
    status
    ;;
k | kube | kubernetes)
    shift
    kube_command "$@"
    ;;
version)
    version
    ;;
-h | --help)
    print_usage
    ;;
"")
    print_usage 1
    ;;
*)
    log "invalid arg '$1'. view help with '$NAME --help'."
    exit 1
    ;;
esac
